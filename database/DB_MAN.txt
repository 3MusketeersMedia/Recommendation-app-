Install postgres on a system

--------------------------------------

$: sudo apt install python2
$: curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
$: sudo python2 get-pip.py
$: pip install psycopg2/psycopg2-binary
$: pip install PyStemmer
$: pip install pandas

run with python2 or above in this case
install on whatever python version you want

-------------------------------------

Example of how to use file in a sample python doc
-------------------------------------

import statements
exec(open("database.py").read())

miscellaneous code

connection = open_DBConnection()

interact with data here

close_DBConnection(connection)

miscellaneous code

-------------------------------------
Example of how to get data in max list size chunks,
If the db has more entries than the max list size in python.

import statements
exec(open("database.py").read())

miscellaneous code

connection = open_DBConnection()


#example 1: check if num items have been got
num = num_items(connection)
list_of_items = get_by_query(connection)
num_items_got = sizeof(list_of_items)
while(num_items_got < num):
	operate on list of items
	list_of_items = get_next(connection)
	num_items_got += sizeof(list_of_items)


#example 2: check if return is empty
list_of items = get_by_query(connection)
while(1):
	operate on list of items
	list_of_items = get_next(connection)
	if list_of_items is empty:
		break


close_DBConnection(connection)

miscellaneous code
--------------------------------------

Outline of table structure:

Default table is called 'media', this will contain all of the media
that we would want to preload into our database

MEDIA:
entry -> name, mediaType, year, link, genres, rating, running_time, ID, summary

USERS: 
entry -> username, password_hash, user_id

Preferences:
entry -> watched, liked, rating, review, user_id (foreign key in users), media_id (foreign key in media)

----------------------------------------

Other Notes:
If you want to change the values of any tuple use the given set function
that is appropriate for that table. (set_data for media table, add_user
for users table, and set_user_data for a table made with create_user_table)

For any of those functions if the value exists in their respective tables,
then the other parameters will be updated. Otherwise a new tuple will
be inserted. 


----------------------------------------

Updates:

Took out create user table, all preferences (watched, liked, rating, etc) will be stored
In a single table called Preferences

Set_data/get_by_watched and liked have changed

New Function -> set_preference, get_user_preference, get_user_liked, get_user_watched, delete_preference


----------------------------------------

List of functions:
	open_DBConnection(dict_cursor=False) -> open connection to db
	close_DBConnection(pair) -> close connection to db
	get_user_recommendations(pair, user_id) -> get user_recommendations based on others ratings
	search_media_table(pair, query) -> search media table for closest match to query
	advanced_search_media_table(pair, query, genre, yearStart, ratingMin, yearEnd, ratingEnd) -> search media table for closest match to query

	WORKS WITH -> media and/or users tables:
	set_data(pair, name, mediaType, year, link, genres, rating, running_time, ID, summary="None") -> set entry or insert new entry into media table
	set_data_id(pair, oldID, newID, table="media") -> set id of existing data point
	add_user(pair, username, password_hash) -> add to users table
	check_user_exists(pair, username) -> returns true if exists and false if not
	get_by_id(pair, ID, table="media") -> get entry by ID
	delete_data(pair, ID, table) -> delete a data point
	get_user_id(pair, username) -> get user_id for corresponding username

	WORKS WITH -> preferences table:
	set_data_liked(pair, user_id, media_id, liked=true) -> set boolean liked value of data with ID
	set_data_watched(pair, user_id, media_id, watched=false) -> set boolean watched value of data with ID
	set_preference(pair, watched, liked, user_id, media_id, rating="NULL", review=" "):	
	get_user_preference(pair, user_id, media_id) -> get single preference
	get_user_preferences(pair, user_id, media_id) -> get all preferences
	get_user_liked(pair, user_id, media_id, liked=True)
	get_user_watched(pair, user_id, media_id, watched=True)
	delete_preference(pair, user_id, media_id)	

	WORKS WITH -> media table: 	
	get_by_name(pair, name) -> get all entries of a given name
	get_by_mediaType(pair, mediaType) -> get entry by mediaType
	get_by_liked(pair, liked=True) -> get all liked elements
	get_by_watched(pair, watched=True) -> get all watched elements
	get_by_year(pair, start, end=-1) -> get all movies from media table that are from years start to end. If end is not specified end = start.
	get_by_rating(pair, start, end=-1) -> get all movies from media table that have a rating in range start to end. If end is not specified end = start
	get_by_running_time(pair, start, end=-1) -> get all movies from media table that have a running time from start to end. If end is not specified end = start

	WORKS WITH -> all tables:
	get_next(pair) -> get the next MAX_LIST_SIZE elements of previous get_by_something() query 
	get_all(pair, table="media") -> get all items in table
	get_many(pair, limit, table="media") -> get limit items in table
	delete_table(pair, table) -> delete table, need to redo exec(...) to reinitialize it
	clear_data(pair, table) -> clear table
	num_items(pair, table="media") -> give num_items in table

Function Details:

open_DBConnection(dict_cursor=False):
	Constraints:
		none
	Parameters:
		dict_cursor -> boolean, if true queries will return of dictionary instead of an array
	Return Type:
		pair-> a tuple with (connection, database, dict_cursor) store this value for other functions when interacting with db

close_DBConnection(pair):
	Constraints:
		database must be open first
	Parameters:
		pair->tuple from open_DBConnection()
	Return Type:
		none

get_user_recommendations(pair, user_id):
        Constraints:
                none
        Parameters:
                pair->tuple from open_DBConnection()
        	user_id-> string (user we want recomendations for)
	Return Type:
                list of media_id's from the media table

search_media_table(pair, query):
        Constraints:
                none
        Parameters:
                pair->tuple from open_DBConnection()
                query-> string name of movie
        Return Type:
                list of tuples from the media table

advanced_search_media_table(pair, query, genre, yearStart, ratingMin, yearEnd, ratingMax):
        Constraints:
                none
        Parameters:
                pair->tuple from open_DBConnection()
                query-> string name of movie
		yearStart -> int
		ratingMin -> float
		yearEnd -> int
		ratingMax -> float
        Return Type:
                list of tuples from the media table

check_user_exists(pair, username):
        Constraints:
                none
        Parameters:
                pair->tuple from open_DBConnection()
                username-> string
        Return Type:
                list of media_id's from the media table

get_user_id(pair, username):
        Constraints:
                none
        Parameters:
                pair->tuple from open_DBConnection()
                username-> string
        Return Type:
                list of media_id's from the media table

add_user(pair, username, password_hash, password_salt, user_id):
        Constraints:
                Cannot reset user_id
                user_id MUST BE UNIQUE, everthing else can have duplicates
        Parameters:
                pair -> (connection, database) tuple from open_DBConnection()
        	username -> string
		password_hash -> string
		password_salt -> string
		user_id -> string
	Return Type:
                none

set_data(pair, name, mediaType, year, link, genres, rating, running_time, ID, summary="None"):
	Constraints:
		Cannot reset ID
		ID MUST BE UNIQUE, everthing else can have duplicates
	Parameters:
		pair -> (connection, database) tuple from open_DBConnection()
		name -> string
		mediaType -> The following strings: 'movie', 'tv show', 'short film', 'anime', or 'manga'
		year -> int
		link -> string
		genres -> string of genres separated by a space: 'horror thriller action adventure'
		rating -> decimal up to 5 decimal places
		running_time -> decimal, in MINUTES, up to 5 decimal places
		ID -> string
		summary -> string
	Return Type:
		none

set_preference(pair, watched, liked, user_id, media_id, rating="NULL", review=" "):
        Constraints:
		user_id must be in users and media_id must be in media
        Parameters:
                pair -> (connection, database) tuple from open_DBConnection()
                watched -> boolean 
                liked -> boolean
                user_id -> string
		media_id ->string
		rating -> decimal
		review -> string
        Return Type:
                none

set_data_id(pair, oldID, newID, table="media"):
	Constraints:
		All ID's must be unique
	Paremeters:
		pair -> tuple from open_DBConnection()
		oldID -> string
		newID -> string
		table -> string name of table
	Return Type:
		none

set_data_liked(pair, user_id, media_id, liked=True):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
		user_id -> string
		media_id -> string
		liked -> boolean
        Return Type:
                none

set_data_watched(pair, user_id, media_id, watched=True):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
                user_id -> string
		media_id -> string
		watched -> boolean
        Return Type:
                none

Get Commands: for each get command, it will return an empty list if no elements found -------------------

get_user_preference(pair, user_id, media_id):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection()
                user_id -> string
		media_id -> string
        Return Type:
                list of tuples -> MAX_LIST_SIZE list of tuples

get_user_preferences(pair, user_id, media_id):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection()
                user_id -> string
                media_id -> string
        Return Type:
                list of tuples -> MAX_LIST_SIZE list of tuples

get_user_liked(pair, user_id, media_id, liked=True):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection()
                user_id -> string
                media_id -> string
        Return Type:
                list of tuples -> MAX_LIST_SIZE list of tuples

get_user_watched(pair, user_id, media_id, watched=True):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection()
                user_id -> string
                media_id -> string
        Return Type:
                list of tuples -> MAX_LIST_SIZE list of tuples

get_by_name(pair, name):
	Constraints:
		none
	Paremeters:
		pair -> tuple from open_DBConnection()
		name -> string
	Return Type:
		list of tuples -> MAX_LIST_SIZE list of tuples

get_by_id(pair, ID, table="media"):
	Constraints:
		Works with media table, users table, and
		tables made with create_user_table.
		If the table is media or a created table, it will look for movie ID's
		If the table is users it will look for user ID
	Paremeters:
		pair -> tuple from open_DBConnection()
		ID -> string
		table -> string name of table
	Return Type:
		tuple -> (name, mediaType, ID)

get_by_mediaType(pair, mediaType):
	Constraints:
		none
	Paremeters:
		pair -> tuple from open_DBConnection()
		mediaType -> string
	Return Type:
		list of tuples -> MAX_LIST_SIZE list of (name, mediaType, ID)

get_by_liked(pair, liked=True):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
		liked -> boolean
        Return Type:
                list of tuples -> list of liked entries

get_by_watched(pair, watched=True):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
		watched -> boolean
        Return Type:
                list of tuples -> list of liked entries

get_by_year(pair, start, end=-1):
        Constraints:
                If end isnt specified start = end
        Parameters:
                pair -> tuple from openDBConnection()
                start -> int
		end -> int
        Return Type:
                list of tuples -> list of entries

get_by_rating(pair, start, end=-1):
        Constraints:
                If end isnt specified start = end
        Parameters:
                pair -> tuple from openDBConnection()
                start -> decimal
                end -> decimal
        Return Type:
                list of tuples -> list of entries

get_by_running_time(pair, start, end=-1):
        Constraints:
                If end isnt specified start = end
        Parameters:
                pair -> tuple from openDBConnection()
                start -> decimal
                end -> decimal
        Return Type:
                list of tuples -> list of entries

get_next(pair):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
        Return Type:
                list of tuples -> MAX_LIST_SIZE chunk of tuples that are in the db

get_many(pair, limit, table="media"):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
                table -> string of table name
		limit -> number of rows
        Return Type:
                list of tuples -> next limit size chunk of tuples (next chunk of a previous get query)

get_all(pair, table="media"):
	Constraints:
		none
	Parameters:
		pair -> tuple from openDBConnection()
		table -> string of table name
	Return Type:
		list of tuples -> next MAX_LIST_SIZE chunk of tuples (next chunk of a previous get query)

End of Get Commands---------------------------------------------------------------------------------------


delete_data(pair, ID, table="media"):
	Constraints:
		Must Exist
	Paremeters:
		pair -> tuple from open_DBConnection
		ID -> string
		table-> string that is the name of the table
	Return Type:
		none

delete_preference(pair, user_id, media_id):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection()
                user_id -> string
                media_id -> string
        Return Type:
                list of tuples -> MAX_LIST_SIZE list of tuples

delete_table(pair, table):
        Constraints:
		Don't delete 'media' table
		If you do, re-execute exec(...)
        Parameters:
                pair -> tuple from openDBConnection()
		table -> string
        Return Type:
                none

clear_data(pair, table):
	Constraints:
		none
	Paremeters:
		pair -> tuple from open_DBConnection
		table -> string name of table
	Return Type:
		none

num_items(pair, table="media"):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection
		table -> string name of table
        Return Type:
                int -> number of items in database

=======
Install postgres on a system

--------------------------------------

$: sudo apt install python2
$: curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
$: sudo python2 get-pip.py
$: pip2 install psycopg2

run with python2 or above in this case
install on whatever python version you want

-------------------------------------

Example of how to use file in a sample python doc
-------------------------------------

import statements
exec(open("database.py").read())

miscellaneous code

connection = open_DBConnection()

interact with data here

close_DBConnection(connection)

miscellaneous code

-------------------------------------
Example of how to get data in max list size chunks,
If the db has more entries than the max list size in python.

import statements
exec(open("database.py").read())

miscellaneous code

connection = open_DBConnection()


#example 1: check if num items have been got
num = num_items(connection)
list_of_items = get_by_query(connection)
num_items_got = sizeof(list_of_items)
while(num_items_got < num):
	operate on list of items
	list_of_items = get_next(connection)
	num_items_got += sizeof(list_of_items)


#example 2: check if return is empty
list_of items = get_by_query(connection)
while(1):
	operate on list of items
	list_of_items = get_next(connection)
	if list_of_items is empty:
		break


close_DBConnection(connection)

miscellaneous code
--------------------------------------

Outline of table structure:

Default table is called 'media', this will contain all of the media
that we would want to preload into our database

MEDIA:
entry -> name, mediaType, year, link, genres, rating, running_time, ID, summary

USERS: 
entry -> username, password_hash, user_id

Preferences:
entry -> watched, liked, rating, review, user_id (foreign key in users), media_id (foreign key in media)

----------------------------------------

Other Notes:
If you want to change the values of any tuple use the given set function
that is appropriate for that table. (set_data for media table, add_user
for users table, and set_user_data for a table made with create_user_table)

For any of those functions if the value exists in their respective tables,
then the other parameters will be updated. Otherwise a new tuple will
be inserted. 


----------------------------------------

Updates:

Took out create user table, all preferences (watched, liked, rating, etc) will be stored
In a single table called Preferences

Set_data/get_by_watched and liked have changed

New Function -> set_preference, get_user_preference, get_user_liked, get_user_watched, delete_preference


----------------------------------------

List of functions:
	open_DBConnection(dict_cursor=False) -> open connection to db
	close_DBConnection(pair) -> close connection to db
	get_user_recommendations(pair, user_id) -> get user_recommendations based on others ratings
	search_media_table(pair, query) -> search media table for closest match to string: query

	WORKS WITH -> media and/or users tables:
	set_data(pair, name, mediaType, year, link, genres, rating, running_time, ID, summary="None") -> set entry or insert new entry into media table
	set_data_id(pair, oldID, newID, table="media") -> set id of existing data point
	add_user(pair, username, password_hash) -> add to users table
	check_user_exists(pair, username) -> returns true if exists and false if not
	get_by_id(pair, ID, table="media") -> get entry by ID
	delete_data(pair, ID, table) -> delete a data point
	get_user_id(pair, username) -> get user_id for corresponding username

	WORKS WITH -> preferences table:
	set_data_liked(pair, user_id, media_id, liked=true) -> set boolean liked value of data with ID
	set_data_watched(pair, user_id, media_id, watched=false) -> set boolean watched value of data with ID
	set_preference(pair, watched, liked, user_id, media_id, rating="NULL", review=" "):	
	get_user_preference(pair, user_id, media_id) -> get single preference
	get_user_preferences(pair, user_id, media_id) -> get all preferences
	get_user_liked(pair, user_id, media_id, liked=True)
	get_user_watched(pair, user_id, media_id, watched=True)
	delete_preference(pair, user_id, media_id)	

	WORKS WITH -> media table: 	
	get_by_name(pair, name) -> get all entries of a given name
	get_by_mediaType(pair, mediaType) -> get entry by mediaType
	get_by_liked(pair, liked=True) -> get all liked elements
	get_by_watched(pair, watched=True) -> get all watched elements
	get_by_year(pair, start, end=-1) -> get all movies from media table that are from years start to end. If end is not specified end = start.
	get_by_rating(pair, start, end=-1) -> get all movies from media table that have a rating in range start to end. If end is not specified end = start
	get_by_running_time(pair, start, end=-1) -> get all movies from media table that have a running time from start to end. If end is not specified end = start

	WORKS WITH -> all tables:
	get_next(pair) -> get the next MAX_LIST_SIZE elements of previous get_by_something() query 
	get_all(pair, table="media") -> get all items in table
	get_many(pair, limit, table="media") -> get limit items in table
	delete_table(pair, table) -> delete table, need to redo exec(...) to reinitialize it
	clear_data(pair, table) -> clear table
	num_items(pair, table="media") -> give num_items in table

Function Details:

open_DBConnection(dict_cursor=False):
	Constraints:
		none
	Parameters:
		dict_cursor -> boolean, if true queries will return of dictionary instead of an array
	Return Type:
		pair-> a tuple with (connection, database, dict_cursor) store this value for other functions when interacting with db

close_DBConnection(pair):
	Constraints:
		database must be open first
	Parameters:
		pair->tuple from open_DBConnection()
	Return Type:
		none

search_media_table(pair, query):
        Constraints:
                none
        Parameters:
                pair->tuple from open_DBConnection()
                query -> string name of movie to look for
        Return Type:
                list of tuples from the media table

get_user_recommendations(pair, user_id):
        Constraints:
                none
        Parameters:
                pair->tuple from open_DBConnection()
        	user_id-> string (user we want recomendations for)
	Return Type:
                list of media_id's from the media table

check_user_exists(pair, username):
        Constraints:
                none
        Parameters:
                pair->tuple from open_DBConnection()
                username-> string
        Return Type:
                list of media_id's from the media table

get_user_id(pair, username):
        Constraints:
                none
        Parameters:
                pair->tuple from open_DBConnection()
                username-> string
        Return Type:
                list of media_id's from the media table

add_user(pair, username, password_hash, password_salt, user_id):
        Constraints:
                Cannot reset user_id
                user_id MUST BE UNIQUE, everthing else can have duplicates
        Parameters:
                pair -> (connection, database) tuple from open_DBConnection()
        	username -> string
		password_hash -> string
		password_salt -> string
		user_id -> string
	Return Type:
                none

set_data(pair, name, mediaType, year, link, genres, rating, running_time, ID, summary="None"):
	Constraints:
		Cannot reset ID
		ID MUST BE UNIQUE, everthing else can have duplicates
	Parameters:
		pair -> (connection, database) tuple from open_DBConnection()
		name -> string
		mediaType -> The following strings: 'movie', 'tv show', 'short film', 'anime', or 'manga'
		year -> int
		link -> string
		genres -> string of genres separated by a space: 'horror thriller action adventure'
		rating -> decimal up to 5 decimal places
		running_time -> decimal, in MINUTES, up to 5 decimal places
		ID -> string
		summary -> string
	Return Type:
		none

set_preference(pair, watched, liked, user_id, media_id, rating="NULL", review=" "):
        Constraints:
		user_id must be in users and media_id must be in media
        Parameters:
                pair -> (connection, database) tuple from open_DBConnection()
                watched -> boolean 
                liked -> boolean
                user_id -> string
		media_id ->string
		rating -> decimal
		review -> string
        Return Type:
                none

set_data_id(pair, oldID, newID, table="media"):
	Constraints:
		All ID's must be unique
	Paremeters:
		pair -> tuple from open_DBConnection()
		oldID -> string
		newID -> string
		table -> string name of table
	Return Type:
		none

set_data_liked(pair, user_id, media_id, liked=True):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
		user_id -> string
		media_id -> string
		liked -> boolean
        Return Type:
                none

set_data_watched(pair, user_id, media_id, watched=True):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
                user_id -> string
		media_id -> string
		watched -> boolean
        Return Type:
                none

Get Commands: for each get command, it will return an empty list if no elements found -------------------

get_user_preference(pair, user_id, media_id):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection()
                user_id -> string
		media_id -> string
        Return Type:
                list of tuples -> MAX_LIST_SIZE list of tuples

get_user_preferences(pair, user_id, media_id):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection()
                user_id -> string
                media_id -> string
        Return Type:
                list of tuples -> MAX_LIST_SIZE list of tuples

get_user_liked(pair, user_id, media_id, liked=True):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection()
                user_id -> string
                media_id -> string
        Return Type:
                list of tuples -> MAX_LIST_SIZE list of tuples

get_user_watched(pair, user_id, media_id, watched=True):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection()
                user_id -> string
                media_id -> string
        Return Type:
                list of tuples -> MAX_LIST_SIZE list of tuples

get_by_name(pair, name):
	Constraints:
		none
	Paremeters:
		pair -> tuple from open_DBConnection()
		name -> string
	Return Type:
		list of tuples -> MAX_LIST_SIZE list of tuples

get_by_id(pair, ID, table="media"):
	Constraints:
		Works with media table, users table, and
		tables made with create_user_table.
		If the table is media or a created table, it will look for movie ID's
		If the table is users it will look for user ID
	Paremeters:
		pair -> tuple from open_DBConnection()
		ID -> string
		table -> string name of table
	Return Type:
		tuple -> (name, mediaType, ID)

get_by_mediaType(pair, mediaType):
	Constraints:
		none
	Paremeters:
		pair -> tuple from open_DBConnection()
		mediaType -> string
	Return Type:
		list of tuples -> MAX_LIST_SIZE list of (name, mediaType, ID)

get_by_liked(pair, liked=True):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
		liked -> boolean
        Return Type:
                list of tuples -> list of liked entries

get_by_watched(pair, watched=True):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
		watched -> boolean
        Return Type:
                list of tuples -> list of liked entries

get_by_year(pair, start, end=-1):
        Constraints:
                If end isnt specified start = end
        Parameters:
                pair -> tuple from openDBConnection()
                start -> int
		end -> int
        Return Type:
                list of tuples -> list of entries

get_by_rating(pair, start, end=-1):
        Constraints:
                If end isnt specified start = end
        Parameters:
                pair -> tuple from openDBConnection()
                start -> decimal
                end -> decimal
        Return Type:
                list of tuples -> list of entries

get_by_running_time(pair, start, end=-1):
        Constraints:
                If end isnt specified start = end
        Parameters:
                pair -> tuple from openDBConnection()
                start -> decimal
                end -> decimal
        Return Type:
                list of tuples -> list of entries

get_next(pair):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
        Return Type:
                list of tuples -> MAX_LIST_SIZE chunk of tuples that are in the db

get_many(pair, limit, table="media"):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
                table -> string of table name
		limit -> number of rows
        Return Type:
                list of tuples -> next limit size chunk of tuples (next chunk of a previous get query)

get_all(pair, table="media"):
	Constraints:
		none
	Parameters:
		pair -> tuple from openDBConnection()
		table -> string of table name
	Return Type:
		list of tuples -> next MAX_LIST_SIZE chunk of tuples (next chunk of a previous get query)

End of Get Commands---------------------------------------------------------------------------------------


delete_data(pair, ID, table="media"):
	Constraints:
		Must Exist
	Paremeters:
		pair -> tuple from open_DBConnection
		ID -> string
		table-> string that is the name of the table
	Return Type:
		none

delete_preference(pair, user_id, media_id):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection()
                user_id -> string
                media_id -> string
        Return Type:
                list of tuples -> MAX_LIST_SIZE list of tuples

delete_table(pair, table):
        Constraints:
		Don't delete 'media' table
		If you do, re-execute exec(...)
        Parameters:
                pair -> tuple from openDBConnection()
		table -> string
        Return Type:
                none

clear_data(pair, table):
	Constraints:
		none
	Paremeters:
		pair -> tuple from open_DBConnection
		table -> string name of table
	Return Type:
		none

num_items(pair, table="media"):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection
		table -> string name of table
        Return Type:
                int -> number of items in database
