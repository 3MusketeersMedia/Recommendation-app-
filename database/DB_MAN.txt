Install postgres on a system

--------------------------------------

$: sudo apt install python2
$: curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
$: sudo python2 get-pip.py
$: pip2 install psycopg2

run with python2 or above in this case
install on whatever python version you want

-------------------------------------

Example of how to use file in a sample python doc
-------------------------------------

import statements
exec(open("database.py").read())

miscellaneous code

connection = open_DBConnection()

interact with data here

close_DBConnection(connection)

miscellaneous code

-------------------------------------
Example of how to get data in max list size chunks,
If the db has more entries than the max list size in python.

import statements
exec(open("database.py").read())

miscellaneous code

connection = open_DBConnection()


#example 1: check if num items have been got
num = num_items(connection)
list_of_items = get_by_query(connection)
num_items_got = sizeof(list_of_items)
while(num_items_got < num):
	operate on list of items
	list_of_items = get_next(connection)
	num_items_got += sizeof(list_of_items)


#example 2: check if return is empty
list_of items = get_by_query(connection)
while(1):
	operate on list of items
	list_of_items = get_next(connection)
	if list_of_items is empty:
		break


close_DBConnection(connection)

miscellaneous code
--------------------------------------




List of functions:
	open_DBConnection() -> open connection to db
	close_DBConnection(pair) -> close connection to db
	set_data(pair, name, mediaType, ID) -> set entry or insert new entry into table
	set_data_id(pair, ID) -> set id of existing data point
	set_data_liked(pair, ID, liked) -> set boolean liked value of data with ID
	get_by_name(pair, name) -> get all entries of a given name
	get_by_id(pair, ID) -> get entry by ID
	get_by_mediaType(pair, mediaType) -> get entry by mediaType
	get_by_liked(pair) -> get all liked elements
	get_all(pair) -> get MAX_LIST_SIZE items in database
	get_next(pair) -> get the next MAX_LIST_SIZE elements of previous get_by_something() query 
	delete_data(pair, ID) -> delete a data point
	delete_table(pair) -> delete table, need to redo exec(...) to reinitialize it
	clear(pair) -> clear table
	num_items(pair) -> give num_items in table

Function Details:

open_DBConnection():
	Constraints:
		none
	Parameters:
		none
	Return Type:
		pair-> a tuple with (connection, database) store this value for other functions when interacting with db

close_DBConnection(pair):
	Constraints:
		database must be open first
	Parameters:
		pair->tuple from open_DBConnection()
	Return Type:
		none

set_data(pair, name, mediaType, ID, liked=False):
	Constraints:
		Cannot reset ID
		ID MUST BE UNIQUE, everthing else can have duplicates
	Parameters:
		pair -> (connection, database) tuple from open_DBConnection()
		name -> string
		mediaType -> The following strings: 'movie', 'tv show', 'short film', 'anime', or 'manga'
		ID -> integer
		Liked -> Liked by a user, default value is False
	Return Type:
		none

set_data_id(pair, oldID, newID):
	Constraints:
		All ID's must be unique
	Paremeters:
		pair -> tuple from open_DBConnection()
		oldID -> int
		newID -> int
	Return Type:
		none

set_data_liked(pair, ID, liked=True):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
		ID -> int
		liked -> boolean
        Return Type:
                none


Get Commands: for each get command, it will return an empty list if no elements found -------------------

get_by_name(pair, name):
	Constraints:
		none
	Paremeters:
		pair -> tuple from open_DBConnection()
		name -> string
	Return Type:
		list of tuples -> MAX_LIST_SIZE list of (name, mediaType, ID)

get_by_id(pair, ID):
	Constraints:
		none
	Paremeters:
		pair -> tuple from open_DBConnection()
		ID -> int
	Return Type:
		tuple -> (name, mediaType, ID)

get_by_mediaType(pair, mediaType):
	Constraints:
		none
	Paremeters:
		pair -> tuple from open_DBConnection()
		mediaType -> string
	Return Type:
		list of tuples -> MAX_LIST_SIZE list of (name, mediaType, ID)

get_by_liked(pair, liked=True):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
		liked -> boolean
        Return Type:
                list of tuples -> list of liked entries

get_next(pair):
        Constraints:
                none
        Parameters:
                pair -> tuple from openDBConnection()
        Return Type:
                list of tuples -> MAX_LIST_SIZE chunk of tuples that are in the db

get_all(pair):
	Constraints:
		none
	Parameters:
		pair -> tuple from openDBConnection()
	Return Type:
		list of tuples -> next MAX_LIST_SIZE chunk of tuples (next chunk of a previous get query)

End of Get Commands---------------------------------------------------------------------------------------


delete_data(pair, ID):
	Constraints:
		Must Exist
	Paremeters:
		pair -> tuple from open_DBConnection
		ID -> int
	Return Type:
		none

delete_table(pair):
        Constraints:
                Need to redo exec("database.py") from above after calling this
		If a new patch doesn't hold, delete_table() and restart the
		program (calling exec(...) at the top)
        Parameters:
                pair -> tuple from openDBConnection()
        Return Type:
                none

clear_data(pair):
	Constraints:
		none
	Paremeters:
		pair -> tuple from open_DBConnection
	Return Type:
		none

num_items(pair):
        Constraints:
                none
        Paremeters:
                pair -> tuple from open_DBConnection
        Return Type:
                int -> number of items in database

